diff --git a/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp b/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp
index a26c12bb934..431f3aef500 100644
--- a/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp
+++ b/lib/Target/AMDGPU/SIAnnotateControlFlow.cpp
@@ -204,6 +204,7 @@ void SIAnnotateControlFlow::openIf(BranchInst *Term) {
   if (isUniform(Term))
     return;
 
+  If = Intrinsic::getDeclaration(Term->getParent()->getModule(), Intrinsic::amdgcn_if);
   Value *Ret = CallInst::Create(If, Term->getCondition(), "", Term);
   Term->setCondition(ExtractValueInst::Create(Ret, 0, "", Term));
   push(Term->getSuccessor(1), ExtractValueInst::Create(Ret, 1, "", Term));
@@ -214,6 +215,7 @@ void SIAnnotateControlFlow::insertElse(BranchInst *Term) {
   if (isUniform(Term)) {
     return;
   }
+  Else = Intrinsic::getDeclaration(Term->getParent()->getModule(), Intrinsic::amdgcn_else);
   Value *Ret = CallInst::Create(Else, popSaved(), "", Term);
   Term->setCondition(ExtractValueInst::Create(Ret, 0, "", Term));
   push(Term->getSuccessor(1), ExtractValueInst::Create(Ret, 1, "", Term));
@@ -232,6 +234,7 @@ Value *SIAnnotateControlFlow::handleLoopCondition(
     }
 
     Value *Args[] = { Cond, Broken };
+    IfBreak = Intrinsic::getDeclaration(Term->getParent()->getModule(), Intrinsic::amdgcn_if_break);
     return CallInst::Create(IfBreak, Args, "", Insert);
   }
 
@@ -241,6 +244,7 @@ Value *SIAnnotateControlFlow::handleLoopCondition(
       Term : L->getHeader()->getTerminator();
 
     Value *Args[] = { Cond, Broken };
+    IfBreak = Intrinsic::getDeclaration(Term->getParent()->getModule(), Intrinsic::amdgcn_if_break);
     return CallInst::Create(IfBreak, Args, "", Insert);
   }
 
@@ -276,6 +280,7 @@ void SIAnnotateControlFlow::handleLoop(BranchInst *Term) {
     Broken->addIncoming(PHIValue, Pred);
   }
 
+  Loop = Intrinsic::getDeclaration(Term->getParent()->getModule(), Intrinsic::amdgcn_loop);
   Term->setCondition(CallInst::Create(Loop, Arg, "", Term));
 
   push(Term->getSuccessor(0), Arg);
@@ -306,8 +311,10 @@ void SIAnnotateControlFlow::closeControlFlow(BasicBlock *BB) {
 
   Value *Exec = popSaved();
   Instruction *FirstInsertionPt = &*BB->getFirstInsertionPt();
-  if (!isa<UndefValue>(Exec) && !isa<UnreachableInst>(FirstInsertionPt))
+  if (!isa<UndefValue>(Exec) && !isa<UnreachableInst>(FirstInsertionPt)) {
+    EndCf = Intrinsic::getDeclaration(BB->getModule(), Intrinsic::amdgcn_end_cf);
     CallInst::Create(EndCf, Exec, "", FirstInsertionPt);
+  }
 }
 
 /// Annotate the control flow with intrinsics so the backend can
